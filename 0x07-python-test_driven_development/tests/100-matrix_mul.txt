======================
The ``matrix_mul`` module
======================

Using ``matrix_mul``
-------------------

Write a function that multiplies 2 matrices:

      Read: Matrix multiplication - only Matrix product (two matrices)
      Prototype: def matrix_mul(m_a, m_b):

      >>> matrix_mul = __import__('100-matrix_mul').matrix_mul

Documentation
=============
Here we verify if our modules an funtions are documented, for holberton requirements is a must.
we use __doc__ to verify module's and function's Documentation

    >>> module_doc = __import__("100-matrix_mul").__doc__
    >>> print(len(module_doc) > 0)
    True

    >>> funciont_doc = __import__("100-matrix_mul").matrix_mul.__doc__
    >>> print(len(funciont_doc) > 0)
    True

General usege
==============

	>>> a = [[3, 2, 1, 5], [9, 1, 3, 0]]
	>>> b = [[2, 9, 0], [1, 3, 5], [2, 4, 7], [8, 1, 5]]
	>>> matrix_mul(a, b)
	[[50, 42, 42], [25, 96, 26]]

	>>> a = [[1, 2],[2, 3], [1, 2],[2, 3],[1, 2],[2, 3]]
	>>> b = [[1, 2, 3],[1, 2, 3]]
	>>> matrix_mul(a, b)
	[[3, 6, 9], [5, 10, 15], [3, 6, 9], [5, 10, 15], [3, 6, 9], [5, 10, 15]]



Handling Erros
==============
Handling not allowed arguments

	 >>> a = 2
	 >>> b = [[2, 9, 0], [1, 3, 5], [2, 4, 7], [8, 1, 5]]
	 >>> matrix_mul(a, b)
	 Traceback (most recent call last):
	 TypeError: m_a must be a list

	 >>> b = "string"
	 >>> a = [[2, 39, 0], [1, 3, 32], [2, 24, 7], [8, 18, 5]]
	 >>> matrix_mul(a, b)
	 Traceback (most recent call last):
	 TypeError: m_b must be a list

	 >>> a = []
	 >>> b = [[1, 2],[3, 4]]
	 >>> matrix_mul(a, b)
	 Traceback (most recent call last):
	 ValueError: m_a can't be empty

	 >>> b = []
	 >>> a = [[1, 2],[3, 4]]
	 >>> matrix_mul(a, b)
	 Traceback (most recent call last):
	 ValueError: m_b can't be empty

	 >>> b = []
	 >>> a = [[1, 2],[3, 4]]
	 >>> matrix_mul(a, b)
	 Traceback (most recent call last):
	 ValueError: m_b can't be empty

	 >>> b = [[]]
	 >>> a = [[1, 2],[3, 4]]
	 >>> matrix_mul(a, b)
	 Traceback (most recent call last):
	 ValueError: m_b can't be empty

	 >>> a = [[]]
	 >>> b = [[1, 2],[3, 4]]
	 >>> matrix_mul(a, b)
	 Traceback (most recent call last):
	 ValueError: m_a can't be empty

	 >>> a = [[1, 2.456],[2, 3.27386]]
	 >>> b = [[1, 2],[3, "6"]]
	 >>> matrix_mul(a, b)
	 Traceback (most recent call last):
	 TypeError: m_b should contain only integers or floats

	 >>> a = [[1, 2.456],[2, 3], [32]]
	 >>> b = [[1, 2],[3, 4]]
	 >>> matrix_mul(a, b)
	 Traceback (most recent call last):
	 TypeError: each row of m_a must be of the same size

	 >>> b = [[1, 2.456],[2, 3], [24]]
	 >>> a = [[1, 2],[3, 4]]
	 >>> matrix_mul(a, b)
	 Traceback (most recent call last):
	 TypeError: each row of m_b must be of the same size

	 >>> a = [[1, 2],[3, 4]]
	 >>> b = [[1, 2, 3],[4, 2, 3],[1, 6, 3]]
	 >>> matrix_mul(a, b)
	 Traceback (most recent call last):
	 ValueError: m_a and m_b can't be multiplied

	 >>> b = True
	 >>> a = [[1, 2, 3],[1, 2, 3]]
	 >>> matrix_mul(a, b)
	 Traceback (most recent call last):
	 TypeError: m_b must be a list

	 >>> a = True
	 >>> b = [[1, 2, 3],[1, 2, 3]]
	 >>> matrix_mul(a, b)
	 Traceback (most recent call last):
	 TypeError: m_a must be a list

	 >>> b = None
	 >>> a = [[1, 2, 3],[1, 2, 3]]
	 >>> matrix_mul(a, b)
	 Traceback (most recent call last):
	 TypeError: m_b must be a list

	 >>> b = 23
	 >>> a = [[1, 2, 3],[1, 2, 3]]
	 >>> matrix_mul(a, b)
	 Traceback (most recent call last):
	 TypeError: m_b must be a list

	 >>> a = [[1, 2],[3, 4]]
	 >>> b = [[1, 2, 3],[4, 2, 3],[1, 6, 3]]
	 >>> matrix_mul(a, b)
	 Traceback (most recent call last):
	 ValueError: m_a and m_b can't be multiplied

	 >>> a = [[1, 2], 32]
	 >>> b = [[2, 9, 32], [1, 6, 5], [4, 4, 7], [8, 3, 5]]
	 >>> matrix_mul(a, b)
	 Traceback (most recent call last):
	 TypeError: m_a must be a list of lists

	 >>> b = [[1, 2], 32]
	 >>> a = [[2, 9, 32], [1, 6, 5], [4, 4, 7], [8, 3, 5]]
	 >>> matrix_mul(a, b)
	 Traceback (most recent call last):
	 TypeError: m_b must be a list of lists

	 >>> a = [[3, 2, 1, 5], [9, 1, 3, "3"]]
	 >>> b = [[2, 9, 0], [1, 3, 5], [2, 4, 7], [8, 1, 5]]
	 >>> matrix_mul(a, b)
	 Traceback (most recent call last):
	 TypeError: m_a should contain only integers or floats

	 >>> a = [[3, 2, 1, 5], [9, 1, 3, None]]
	 >>> b = [[2, 9, 0], [1, 3, 5], [2, 4, 7], [8, 1, 5]]
	 >>> matrix_mul(a, b)
	 Traceback (most recent call last):
	 TypeError: m_a should contain only integers or floats

	 >>> a = [[3, 2, 1, 5], [9, 1, 3, [1, 3, 4]]]
	 >>> b = [[2, 9, 0], [1, 3, 5], [2, 4, 7], [8, 1, 5]]
	 >>> matrix_mul(a, b)
	 Traceback (most recent call last):
	 TypeError: m_a should contain only integers or floats

	 >>> a = [[3, 2, 1, 5], [9, 1, 3, {"hola"}]]
	 >>> b = [[2, 9, 0], [1, 3, 5], [2, 4, 7], [8, 1, 5]]
	 >>> matrix_mul(a, b)
	 Traceback (most recent call last):
	 TypeError: m_a should contain only integers or floats

	 >>> a = [[3, 2, "33", 5], [9, 1, 3, "3"]]
	 >>> b = [[2, 9, 0], [1, 3, 5], [2, 4, 7], [8, 1, 5]]
	 >>> matrix_mul(a, b)
	 Traceback (most recent call last):
	 TypeError: m_a should contain only integers or floats

	 >>> a = [[3, 2, 1, 5], [9, 1, 3, 3]]
	 >>> b = [[2, 9, 0], [1, 3, 5], [2, 4, 7], [8, "hello", 5]]
	 >>> matrix_mul(a, b)
	 Traceback (most recent call last):
	 TypeError: m_b should contain only integers or floats

	 >>> a = [[3, 2, 1, 5], [9, 1, 3, 3]]
	 >>> b = [[2, 9, 0], [1, 3, 5], [2, 4, 7], [8, [1, 3, 4], 5]]
	 >>> matrix_mul(a, b)
	 Traceback (most recent call last):
	 TypeError: m_b should contain only integers or floats

	 >>> a = [[3, 2, 1, 5], [9, 1, 3, 3]]
	 >>> b = [[2, 9, 0], [1, 3, 5], [2, 4, 7], [8, {"hello"}, 5]]
	 >>> matrix_mul(a, b)
	 Traceback (most recent call last):
	 TypeError: m_b should contain only integers or floats

	 >>> a = [[3, 2, 1, 5], [9, 1, 3, 3]]
	 >>> b = [[2, 9, 0], [1, 3, 5], [2, 4, 7], [8, False, 5]]
	 >>> matrix_mul(a, b)
	 Traceback (most recent call last):
	 TypeError: m_b should contain only integers or floats

	 >>> a = [[3, 2, 1, 5], [9, 1, 3, 3]]
	 >>> b = [[2, 9, 0], [1, 3, 5], [2, 4, 7], [8, 3, 5, 4]]
	 >>> matrix_mul(a, b)
	 Traceback (most recent call last):
	 TypeError: each row of m_b must be of the same size

	 >>> a = [[3, 2, 1, 5], [9, 1, 3, 3, 4]]
	 >>> b = [[2, 9, 0], [1, 3, 5], [2, 4, 7], [8, 3, 5]]
	 >>> matrix_mul(a, b)
	 Traceback (most recent call last):
	 TypeError: each row of m_a must be of the same size

	 >>> matrix_mul([[1, 1]], [[2, 2], [2, 3]], [[3, 2], [3, 2]])
	 Traceback (most recent call last):
	 TypeError: matrix_mul() takes 2 positional arguments but 3 were given

	 >>> matrix_mul([[1, 1]])
	 Traceback (most recent call last):
	 TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

	 >>> matrix_mul([ ,[1, 1]])
	 Traceback (most recent call last):
	 SyntaxError: invalid syntax

	 >>> matrix_mul()
	 Traceback (most recent call last):
	 TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

	 >>> matrix_mul([[1, 2], [3, 4]])
	 Traceback (most recent call last):
	 TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

	 >>> matrix_mul([[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]])
	 Traceback (most recent call last):
	 TypeError: matrix_mul() takes 2 positional arguments but 3 were given

	 >>> matrix_mul([[1, 2], [3, 4]], [[1.5, 2.5, 3.5], [4.5, 6.5, 7.5]])
	 [[10.5, 15.5, 18.5], [22.5, 33.5, 40.5]]


	 >>> matrix_mul([[], []], [[1, 2], [3, 4]])
	 Traceback (most recent call last):
	 ValueError: m_a can't be empty

Test 2 bad matrices:
    >>> matrix_mul([[1, 2, 3], [3, 4, 5]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    ValueError: m_a and m_b can't be multiplied

Test 2 ok matrices:
    >>> matrix_mul([[1, 2], [3, 4], [3, 4]], [[5, 6, 1], [7, 8, 2]])
    [[19, 22, 5], [43, 50, 11], [43, 50, 11]]

Test singly empty matrix:
    >>> matrix_mul([], [[3]])
    Traceback (most recent call last):
    ...
    ValueError: m_a can't be empty

Test singly empty matrix:
    >>> matrix_mul([[]], [[3]])
    Traceback (most recent call last):
    ...
    ValueError: m_a can't be empty

Test singly empty matrix 2:
    >>> matrix_mul([[4]], [])
    Traceback (most recent call last):
    ...
    ValueError: m_b can't be empty

Test doubly empty matrix:
    >>> matrix_mul([[3]], [[]])
    Traceback (most recent call last):
    ...
    ValueError: m_b can't be empty

Test simple case:
    >>> matrix_mul([[3]], [[9]])
    [[27]]

Test string arg:
    >>> matrix_mul("foo", [[9]])
    Traceback (most recent call last):
    ...
    TypeError: m_a must be a list

Test string arg:
    >>> matrix_mul([[8]], "bar")
    Traceback (most recent call last):
    ...
    TypeError: m_b must be a list


Test int list:
    >>> matrix_mul([1, 3, 4], [[9]])
    Traceback (most recent call last):
    ...
    TypeError: m_a must be a list of lists

Test int list 2:
    >>> matrix_mul([[8]], [2, 4, 6])
    Traceback (most recent call last):
    ...
    TypeError: m_b must be a list of lists

Test notnum list:
    >>> matrix_mul([["foo"]], [[2, 4, 6]])
    Traceback (most recent call last):
    ...
    TypeError: m_a should contain only integers or floats

Test notnum list 2 :
    >>> matrix_mul([[2, 4, 6]], [["foo"]])
    Traceback (most recent call last):
    ...
    TypeError: m_b should contain only integers or floats

Test a bad rows:
    >>> matrix_mul([[1, 2], [3, 4, 5], [3, 4]], [[5, 6, 1], [7, 8, 2]])
    Traceback (most recent call last):
    ...
    TypeError: each row of m_a must be of the same size

Test b bad rows:
    >>> matrix_mul([[1, 2], [3, 4], [3, 4]], [[5, 6, 1], [7, 2]])
    Traceback (most recent call last):
    ...
    TypeError: each row of m_b must be of the same size

Test missing 1 arg:
    >>> matrix_mul([[3]])
    Traceback (most recent call last):
    ...
    TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

Test missing 2 args:
    >>> matrix_mul()
    Traceback (most recent call last):
    ...
    TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
